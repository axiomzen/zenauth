// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth.proto

/*
Package protobuf is a generated protocol buffer package.

It is generated from these files:
	auth.proto
	user.proto

It has these top-level messages:
	UserID
	UserIDs
	InvitationCode
	User
	UserPublic
	UsersPublic
	UserEmailAuth
	UserFacebookAuth
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserID struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *UserID) Reset()                    { *m = UserID{} }
func (m *UserID) String() string            { return proto.CompactTextString(m) }
func (*UserID) ProtoMessage()               {}
func (*UserID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UserIDs struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *UserIDs) Reset()                    { *m = UserIDs{} }
func (m *UserIDs) String() string            { return proto.CompactTextString(m) }
func (*UserIDs) ProtoMessage()               {}
func (*UserIDs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserIDs) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type InvitationCode struct {
	Type       string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	InviteCode string `protobuf:"bytes,2,opt,name=inviteCode" json:"inviteCode,omitempty"`
}

func (m *InvitationCode) Reset()                    { *m = InvitationCode{} }
func (m *InvitationCode) String() string            { return proto.CompactTextString(m) }
func (*InvitationCode) ProtoMessage()               {}
func (*InvitationCode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *InvitationCode) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *InvitationCode) GetInviteCode() string {
	if m != nil {
		return m.InviteCode
	}
	return ""
}

func init() {
	proto.RegisterType((*UserID)(nil), "protobuf.UserID")
	proto.RegisterType((*UserIDs)(nil), "protobuf.UserIDs")
	proto.RegisterType((*InvitationCode)(nil), "protobuf.InvitationCode")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Auth service

type AuthClient interface {
	GetCurrentUser(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*User, error)
	GetUserByID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserPublic, error)
	LinkUser(ctx context.Context, in *InvitationCode, opts ...grpc.CallOption) (*UserPublic, error)
	GetUsersByIDs(ctx context.Context, in *UserIDs, opts ...grpc.CallOption) (*UsersPublic, error)
	GetUsersByFacebookIDs(ctx context.Context, in *UserIDs, opts ...grpc.CallOption) (*UsersPublic, error)
	AuthUserByEmail(ctx context.Context, in *UserEmailAuth, opts ...grpc.CallOption) (*User, error)
	AuthUserByFacebook(ctx context.Context, in *UserFacebookAuth, opts ...grpc.CallOption) (*User, error)
	UpdateUserEmail(ctx context.Context, in *UserEmailAuth, opts ...grpc.CallOption) (*User, error)
	UpdateUserName(ctx context.Context, in *UserEmailAuth, opts ...grpc.CallOption) (*User, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) GetCurrentUser(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/protobuf.Auth/GetCurrentUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUserByID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserPublic, error) {
	out := new(UserPublic)
	err := grpc.Invoke(ctx, "/protobuf.Auth/GetUserByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) LinkUser(ctx context.Context, in *InvitationCode, opts ...grpc.CallOption) (*UserPublic, error) {
	out := new(UserPublic)
	err := grpc.Invoke(ctx, "/protobuf.Auth/LinkUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUsersByIDs(ctx context.Context, in *UserIDs, opts ...grpc.CallOption) (*UsersPublic, error) {
	out := new(UsersPublic)
	err := grpc.Invoke(ctx, "/protobuf.Auth/GetUsersByIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUsersByFacebookIDs(ctx context.Context, in *UserIDs, opts ...grpc.CallOption) (*UsersPublic, error) {
	out := new(UsersPublic)
	err := grpc.Invoke(ctx, "/protobuf.Auth/GetUsersByFacebookIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AuthUserByEmail(ctx context.Context, in *UserEmailAuth, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/protobuf.Auth/AuthUserByEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AuthUserByFacebook(ctx context.Context, in *UserFacebookAuth, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/protobuf.Auth/AuthUserByFacebook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdateUserEmail(ctx context.Context, in *UserEmailAuth, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/protobuf.Auth/UpdateUserEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdateUserName(ctx context.Context, in *UserEmailAuth, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/protobuf.Auth/UpdateUserName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthServer interface {
	GetCurrentUser(context.Context, *google_protobuf.Empty) (*User, error)
	GetUserByID(context.Context, *UserID) (*UserPublic, error)
	LinkUser(context.Context, *InvitationCode) (*UserPublic, error)
	GetUsersByIDs(context.Context, *UserIDs) (*UsersPublic, error)
	GetUsersByFacebookIDs(context.Context, *UserIDs) (*UsersPublic, error)
	AuthUserByEmail(context.Context, *UserEmailAuth) (*User, error)
	AuthUserByFacebook(context.Context, *UserFacebookAuth) (*User, error)
	UpdateUserEmail(context.Context, *UserEmailAuth) (*User, error)
	UpdateUserName(context.Context, *UserEmailAuth) (*User, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_GetCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Auth/GetCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetCurrentUser(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Auth/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetUserByID(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_LinkUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvitationCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).LinkUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Auth/LinkUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).LinkUser(ctx, req.(*InvitationCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetUsersByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetUsersByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Auth/GetUsersByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetUsersByIDs(ctx, req.(*UserIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetUsersByFacebookIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetUsersByFacebookIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Auth/GetUsersByFacebookIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetUsersByFacebookIDs(ctx, req.(*UserIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AuthUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmailAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AuthUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Auth/AuthUserByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AuthUserByEmail(ctx, req.(*UserEmailAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AuthUserByFacebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFacebookAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AuthUserByFacebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Auth/AuthUserByFacebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AuthUserByFacebook(ctx, req.(*UserFacebookAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdateUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmailAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdateUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Auth/UpdateUserEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdateUserEmail(ctx, req.(*UserEmailAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmailAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Auth/UpdateUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdateUserName(ctx, req.(*UserEmailAuth))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentUser",
			Handler:    _Auth_GetCurrentUser_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _Auth_GetUserByID_Handler,
		},
		{
			MethodName: "LinkUser",
			Handler:    _Auth_LinkUser_Handler,
		},
		{
			MethodName: "GetUsersByIDs",
			Handler:    _Auth_GetUsersByIDs_Handler,
		},
		{
			MethodName: "GetUsersByFacebookIDs",
			Handler:    _Auth_GetUsersByFacebookIDs_Handler,
		},
		{
			MethodName: "AuthUserByEmail",
			Handler:    _Auth_AuthUserByEmail_Handler,
		},
		{
			MethodName: "AuthUserByFacebook",
			Handler:    _Auth_AuthUserByFacebook_Handler,
		},
		{
			MethodName: "UpdateUserEmail",
			Handler:    _Auth_UpdateUserEmail_Handler,
		},
		{
			MethodName: "UpdateUserName",
			Handler:    _Auth_UpdateUserName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}

func init() { proto.RegisterFile("auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x4f, 0x6b, 0xc2, 0x40,
	0x10, 0xc5, 0xfd, 0x87, 0xd5, 0x29, 0x8d, 0x76, 0xa8, 0x6d, 0x88, 0x50, 0x24, 0x27, 0x4f, 0x11,
	0xda, 0x43, 0xa1, 0x7a, 0xa9, 0xc6, 0x4a, 0xa0, 0x94, 0x22, 0xf8, 0x01, 0x12, 0x33, 0xd5, 0x45,
	0xcd, 0x86, 0xec, 0xa6, 0xe0, 0x37, 0xeb, 0xc7, 0x2b, 0x9b, 0x18, 0xd3, 0x94, 0x7a, 0xf0, 0xb4,
	0xc3, 0xdb, 0xdf, 0x9b, 0xb7, 0x6f, 0x01, 0xdc, 0x58, 0xae, 0xad, 0x30, 0xe2, 0x92, 0x63, 0x23,
	0x39, 0xbc, 0xf8, 0xd3, 0xe8, 0xae, 0x38, 0x5f, 0x6d, 0x69, 0x90, 0x09, 0x03, 0xda, 0x85, 0x72,
	0x9f, 0x62, 0x06, 0xc4, 0x82, 0xa2, 0x74, 0x36, 0x75, 0xa8, 0x2f, 0x04, 0x45, 0x8e, 0x8d, 0x1a,
	0x54, 0x98, 0xaf, 0x97, 0x7b, 0xe5, 0x7e, 0x73, 0x5e, 0x61, 0xbe, 0xd9, 0x85, 0x8b, 0xf4, 0x46,
	0x60, 0x1b, 0xaa, 0xcc, 0x17, 0x7a, 0xb9, 0x57, 0xed, 0x37, 0xe7, 0x6a, 0x34, 0x6d, 0xd0, 0x9c,
	0xe0, 0x8b, 0x49, 0x57, 0x32, 0x1e, 0x4c, 0xb8, 0x4f, 0x88, 0x50, 0x93, 0xfb, 0x90, 0x0e, 0x0b,
	0x92, 0x19, 0xef, 0x01, 0x98, 0xa2, 0x48, 0x11, 0x7a, 0x25, 0xb9, 0xf9, 0xa5, 0x3c, 0x7c, 0xd7,
	0xa0, 0xf6, 0x12, 0xcb, 0x35, 0x3e, 0x83, 0x36, 0x23, 0x39, 0x89, 0xa3, 0x88, 0x02, 0xa9, 0x52,
	0xf1, 0xd6, 0x4a, 0x1b, 0x58, 0x59, 0x03, 0x6b, 0xaa, 0x1a, 0x18, 0x5a, 0x2e, 0x28, 0xce, 0x2c,
	0xe1, 0x13, 0x5c, 0xce, 0x28, 0x31, 0x8d, 0xf7, 0x8e, 0x8d, 0xed, 0x22, 0xe0, 0xd8, 0xc6, 0x4d,
	0x51, 0xf9, 0x88, 0xbd, 0x2d, 0x5b, 0x9a, 0x25, 0x1c, 0x41, 0xe3, 0x8d, 0x05, 0x9b, 0x24, 0x4e,
	0xcf, 0x99, 0x62, 0xaf, 0x93, 0xee, 0x21, 0x5c, 0x1d, 0x62, 0x85, 0xca, 0x15, 0x78, 0xfd, 0x37,
	0x58, 0x18, 0x9d, 0xa2, 0x24, 0x8e, 0xe6, 0x09, 0x74, 0x72, 0xf3, 0xab, 0xbb, 0x24, 0x8f, 0xf3,
	0xcd, 0xb9, 0x4b, 0x46, 0xd0, 0x52, 0x9f, 0x97, 0x36, 0x9f, 0xee, 0x5c, 0xb6, 0xc5, 0xbb, 0x22,
	0x9b, 0x88, 0x8a, 0xf9, 0xe7, 0xdb, 0xc6, 0x80, 0xb9, 0x3b, 0x7b, 0x02, 0x1a, 0x45, 0x2e, 0xd3,
	0x4f, 0xec, 0x18, 0x41, 0x6b, 0x11, 0xfa, 0xae, 0xa4, 0x63, 0xd8, 0x39, 0x2f, 0x18, 0x82, 0x96,
	0xbb, 0xdf, 0xdd, 0x1d, 0x9d, 0x61, 0xf6, 0xea, 0x89, 0xf0, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff,
	0x2a, 0xa6, 0x37, 0xe4, 0xff, 0x02, 0x00, 0x00,
}
